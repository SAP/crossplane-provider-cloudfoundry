name: Upgrade Test Workflow

# triggered on workflow dispatch

permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Source version"
        required: true
        default: "v0.3.0"
      target:
        description: "Target version"
        required: false

jobs:
  # if the target is not set, we want to take the latest git commit of the branch and build the image with that.
  build-test-version:
    if: ${{ github.event.inputs.target == '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
        with:
          version: v0.15.1
          install: true
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          submodules: true
      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.21"

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Set up Version
        run: |
          echo "BUILD_IMAGE_VERSION=v0.0.0-draft-${{ github.sha }}" >> $GITHUB_ENV
          echo "version is $BUILD_IMAGE_VERSION"
      - name: Build Images
        run: make build VERSION=$BUILD_IMAGE_VERSION
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
          DOCKER_REGISTRY: ${{ vars.REGISTRY_URL }}
          BUILD_REGISTRY: ${{ vars.REGISTRY_URL }}

      - name: Login to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Artifacts to DockerHub
        run: make publish BRANCH_NAME=${GITHUB_REF##*/} VERSION=$BUILD_IMAGE_VERSION
        env:
          DOCKER_REGISTRY: ${{ vars.REGISTRY_URL }}
          BUILD_REGISTRY: ${{ vars.REGISTRY_URL }}

  upgrade-test:
    needs: [build-test-version]
    runs-on: ubuntu-latest
    if: always() # would also run if build-test-version fails but we just fail too
    steps:
      # if the target is not set, use the version built in the build-test-version job
      # if triggered with source and target we just use these to versions for the test
      - name: Set TARGET_IMAGE_VERSION
        run: |
          if [ -z "${{ github.event.inputs.target }}" ]; then
            echo "TARGET_IMAGE_VERSION=$BUILD_IMAGE_VERSION" >> $GITHUB_ENV
          else
            echo "TARGET_IMAGE_VERSION=${{ github.event.inputs.target }}" >> $GITHUB_ENV
          fi

      - name: Clone provider-upgrade-test repo
        run: |
          git clone https://github.com/openmcp-project/provider-upgrade-test.git
          echo "Repository provider-upgrade-test cloned successfully."

      - name: Install CLI Tools
        run: |
          echo "Installing Kind..."
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          echo "Installing Kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          echo "Installing Chainsaw..."
          curl -LO https://github.com/kyverno/chainsaw/releases/download/v0.2.12/chainsaw_linux_amd64.tar.gz && \
          tar -xzvf chainsaw_linux_amd64.tar.gz && \
          chmod +x chainsaw && \
          sudo mv chainsaw /usr/local/bin/chainsaw && \
          chainsaw version

          echo "Installing sed..."
          sudo apt-get update && sudo apt-get install -y sed

          echo "Installing jq..."
          sudo apt-get install -y jq

          echo "Installing yq..."
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

          echo "All tools installed successfully."
      - name: Run upgrade test
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd provider-upgrade-test
          echo "Running upgrade test..."
          REGISTRY=ghcr.io/sap/crossplane-provider-cloudfoundry/crossplane/provider-cloudfoundry && ./provider-test.sh upgrade-test --source "${REGISTRY}:${{ github.event.inputs.source }}" --target ${REGISTRY}:${TARGET_IMAGE_VERSION} --provider provider-cloudfoundry 
        env:
          CF_CREDENTIALS: ${{ secrets.CF_CREDENTIALS }}
          CF_ENVIRONMENT: ${{ secrets.CF_ENVIRONMENT }}