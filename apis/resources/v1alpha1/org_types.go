/*
Copyright 2023 SAP SE.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgObservation struct {
	// (Map of String) The annotations associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// (String) The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The ID of the Organization.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) The labels associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) The name of the Organization in Cloud Foundry.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of quota to be applied to this Organization. Default quota is assigned to the Organization by default.
	Quota *string `json:"quota,omitempty" tf:"quota,omitempty"`

	// (Boolean) Whether an Organization is suspended or not.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// (String) The date and time when the resource was updated in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type OrgParameters struct {
	// (Map of String) The annotations associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// (Map of String) The labels associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) The name of the Organization in Cloud Foundry.
	// +kubebuilder:validation:Required
	Name string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Whether an Organization is suspended or not.
	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`
}

// OrgSpec defines the desired state of Org
type OrgSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgParameters `json:"forProvider"`
}

// OrgStatus defines the observed state of Org.
type OrgStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Org is the Schema for the Orgs API. Creates a Cloud Foundry Organization
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudfoundry}
type Organization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   OrgSpec   `json:"spec"`
	Status OrgStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgList contains a list of Orgs
type OrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Organization `json:"items"`
}

// Repository type metadata.
var (
	Org_Kind             = "Organization"
	Org_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Org_Kind}.String()
	Org_KindAPIVersion   = Org_Kind + "." + CRDGroupVersion.String()
	Org_GroupVersionKind = CRDGroupVersion.WithKind(Org_Kind)
)

func init() {
	SchemeBuilder.Register(&Organization{}, &OrganizationList{})
}

// GetID returns ID of underlying resource of this App
func (tr *Organization) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}
