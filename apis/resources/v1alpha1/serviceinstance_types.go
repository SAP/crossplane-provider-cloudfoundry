/*
Copyright 2023 SAP SE.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// A ServiceInstanceType defines the type of Cloud Foundry service instance type
// +kubebuilder:validation:Enum=managed;user-provided
type ServiceInstanceType string

const (
	// ManagedService means the external resource is a managed service instance.
	ManagedService ServiceInstanceType = "managed"

	// UserProvidedService means the external resource is a user-provided service instance.
	UserProvidedService ServiceInstanceType = "user-provided"
)

type ServiceInstanceParameters struct {
	// (String) The name of the service instance
	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the service instance. Either managed or user-provided. Default is managed.
	// +required
	// +kubebuilder:default=managed
	Type ServiceInstanceType `json:"type"`

	// (Attributes) Reference to the Cloud Foundry space where the service instance will be created.
	SpaceReference `json:",inline"`

	// (Attributes) Fields relevant for managed service instances. Only used when `type` is `managed`.
	Managed `json:",inline"`

	// (Attributes) Fields relevant only for user-provided service instances. Only used when `type` is `user-provided`.
	UserProvided `json:",inline"`

	// (Attributes) Timeouts for the service instance operations.
	// +kubebuilder:validation:Optional
	Timeouts TimeoutsParameters `json:"timeouts,omitempty" tf:"timeouts,omitempty"`

	// (List of String) List of tags used by apps to identify service instances. They are shown in the app VCAP_SERVICES env.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Map of String) The annotations associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`
}

// Managed configuration for a managed service instance. Only used when `type` is `managed`.
type Managed struct {

	// (Attributes) Reference to the service plan for the managed service instance.
	// +kubebuilder:validation:Optional
	ServicePlan *ServicePlanParameters `json:"servicePlan,omitempty"`

	// (Attributes) Configuration parameters for the managed service instance, supplied as a K8S runtime.RawExtension object.
	// The `parameters` field is NOT secret or secured in any way and should NEVER be used to hold sensitive information.
	// To set parameters that contain secret information, you should ALWAYS store that information in a Secret and use the `paramsSecretRef` field.
	// +kubebuilder:pruning:PreserveUnknownFields
	Parameters *runtime.RawExtension `json:"parameters,omitempty"`

	// (String) Same as `parameters`, supplied as arbitrary JSON string. Ignored if `parameters` is set.
	// +optional
	JSONParams *string `json:"jsonParams,omitempty"`

	// (Attributes) Same as `parameters`, supplied as a Secret reference. Ignored if `parameters` or `jsonParams` is set.
	// +kubebuilder:validation:Optional
	ParametersSecretRef *SecretKeySelector `json:"paramsSecretRef,omitempty" tf:"-"`

	// (Attributes) Information about the version of this service instance; only shown when `type` is `managed`.
	MaintenanceInfo MaintenanceInfo `json:"maintenanceInfo,omitempty"`
}

// UserProvided configuration for a user-provided service instance. Only used when `type` is `user-provided`.
type UserProvided struct {
	// (Attributes) Arbitrary credentials as K8S runtime.RawExtension object, delivered to applications via VCAP_SERVICES environment variables.
	// The `credentials` field is NOT secret or secured in any way and should NEVER be used to hold sensitive information.
	// To set parameters that contain secret information, you should ALWAYS store that information in a Secret and use the `credentialsSecretRef` field.
	// +kubebuilder:pruning:PreserveUnknownFields
	Credentials *runtime.RawExtension `json:"credentials,omitempty"`

	// (String) Same as `credentials`, supplied as arbitrary JSON string. Ignored if `credentials` is set.
	// +optional
	JSONCredentials *string `json:"jsonCredentials,omitempty"`

	// (Attributes) Same as `credentials`, supplied as a Secret reference. Ignored if `credentials` or `jsonCredentials` is set.
	// +kubebuilder:validation:Optional
	CredentialsSecretRef *SecretKeySelector `json:"credentialsSecretRef,omitempty"`

	// (String) URL to which requests for bound routes will be forwarded; only shown when `type` is `user-provided`.
	// +kubebuilder:validation:Optional
	RouteServiceURL string `json:"routeServiceUrl,omitempty"`

	// (String) URL to which logs for bound applications will be streamed; only shown when `type` is `user-provided`.
	// +kubebuilder:validation:Optional
	SyslogDrainURL string `json:"syslogDrainUrl,omitempty"`
}

// A SecretKeySelector is a reference to a secret key in an arbitrary namespace.
type SecretKeySelector struct {
	*v1.SecretReference `json:",inline"`

	// The key to select.
	// +kubebuilder:validation:Optional
	Key string `json:"key,omitempty"`
}


type ServiceInstanceObservation struct {
	// (String) The GUID of the service instance.
	ID *string `json:"id,omitempty"`

	// (String) The name of the service instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The GUID of the space in which the service instance was created.
	Space *string `json:"space,omitempty"`

	// (String) The GUID of the service plan for a managed service instance.
	ServicePlan *string `json:"servicePlan,omitempty"`

	// (Attributes) The applied parameters of the managed service instance (TO BE IMPLEMENTED).
	Parameters runtime.RawExtension `json:"parameters,omitempty"`

	// (String) The applied credentials of the managed service instance.
	Credentials []byte `json:"credentials,omitempty"`

	// (String) The job GUID of the last async operation performed on the resource.
	LastAsyncJob *string `json:"lastAsyncJob,omitempty"`

	// (Map of String) The annotations associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// (Map of String) The labels associated with Cloud Foundry resources. Add as described [here](https://docs.cloudfoundry.org/adminguide/metadata.html#-view-metadata-for-an-object).
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Attributes) The details of the last operation performed on the resource.
	LastOperation `json:"lastOperation,omitempty" tf:"last_operation,omitempty"`

	// (Attributes) Information about the version of this service instance; only shown when `type` is `managed`.
	MaintenanceInfo MaintenanceInfo `json:"maintenanceInfo,omitempty" tf:"maintenance_info,omitempty"`

	// (String) The URL to the service instance dashboard (or null if there is none); only shown when `type` is `managed`.
	DashboardURL *string `json:"dashboardUrl,omitempty" tf:"dashboard_url,omitempty"`

	// (String) URL to which requests for bound routes will be forwarded; only shown when `type` is `user-provided`.
	RouteServiceURL *string `json:"routeServiceUrl,omitempty" tf:"route_service_url,omitempty"`

	// (String) URL to which logs for bound applications will be streamed; only shown when `type` is `user-provided`.
	SyslogDrainURL *string `json:"syslogDrainUrl,omitempty" tf:"syslog_drain_url,omitempty"`

	// (List of String) List of tags used by apps to identify service instances. They are shown in the app VCAP_SERVICES env.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) The date and time when the resource was created in RFC3339 format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The date and time when the resource was updated in RFC3339 format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Boolean) Whether or not an upgrade of this service instance is available on the current service plan; details are available in the `maintenanceInfo` object; only shown when `type` is `managed`.
	UpgradeAvailable *bool `json:"upgradeAvailable,omitempty" tf:"upgrade_available,omitempty"`
}

// MaintenanceInfo contains information about the version of this service instance.
type MaintenanceInfo struct {

	// (String) A description of the last operation.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The version of the service instance.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// ServicePlanParameters defines a service plan for a managed service instance.
type ServicePlanParameters struct {
	// (String) The ID of the service plan from which to create the service instance.
	// +optional
	ID *string `json:"id"`

	// (String) The name of the plan offering.
	// +optional
	Offering *string `json:"offering"`

	// (String) The name of the service plan.
	// +optional
	Plan *string `json:"plan"`
}

type TimeoutsParameters struct {

	// (String) Timeout for creating the service instance. Default is 40 minutes.
	// +kubebuilder:validation:Optional
	Create *string `json:"create,omitempty" tf:"create,omitempty"`

	// (String) Timeout for deleting the service instance. Default is 40 minutes.
	// +kubebuilder:validation:Optional
	Delete *string `json:"delete,omitempty" tf:"delete,omitempty"`

	// (String) Timeout for updating the service instance. Default is 40 minutes.
	// +kubebuilder:validation:Optional
	Update *string `json:"update,omitempty" tf:"update,omitempty"`
}

// ServiceInstanceSpec defines the desired state of ServiceInstance
type ServiceInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceInstanceParameters `json:"forProvider"`

	// (Boolean) Enable drift detection for configuration parameters of managed service instance. Default is false.
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=false
	EnableParameterDriftDetection bool `json:"enableParameterDriftDetection,omitempty"`
}

// ServiceInstanceStatus defines the observed state of ServiceInstance
type ServiceInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceInstance is the Schema for the ServiceInstances API. Provides a Cloud Foundry resource for managing service instances.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudfoundry}
// +kubebuilder:validation:XValidation:rule="self.spec.managementPolicies == ['Observe'] || (has(self.spec.forProvider.spaceName) || has(self.spec.forProvider.spaceRef) || has(self.spec.forProvider.spaceSelector))",message="SpaceReference is required: exactly one of spaceName, spaceRef, or spaceSelector must be set"
// +kubebuilder:validation:XValidation:rule="[has(self.spec.forProvider.spaceName), has(self.spec.forProvider.spaceRef), has(self.spec.forProvider.spaceSelector)].filter(x, x).size() <= 1",message="SpaceReference validation: only one of spaceName, spaceRef, or spaceSelector can be set"
type ServiceInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceInstanceSpec   `json:"spec"`
	Status            ServiceInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceInstanceList contains a list of ServiceInstances
type ServiceInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceInstance `json:"items"`
}

// Repository type metadata.
var (
	ServiceInstance_Kind             = "ServiceInstance"
	ServiceInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceInstance_Kind}.String()
	ServiceInstance_KindAPIVersion   = ServiceInstance_Kind + "." + CRDGroupVersion.String()
	ServiceInstance_GroupVersionKind = CRDGroupVersion.WithKind(ServiceInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceInstance{}, &ServiceInstanceList{})
}

// GetName implements Nameable interface
func (r *ServiceInstance) GetCloudFoundryName() string {
	if r.Spec.ForProvider.Name == nil {
		return ""
	}
	return *r.Spec.ForProvider.Name
}

// GetSpaceRef returns the reference to the space
func (s *ServiceInstance) GetSpaceRef() *SpaceReference {
	return &s.Spec.ForProvider.SpaceReference
}
