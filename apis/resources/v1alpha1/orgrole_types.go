/*
Copyright 2023 SAP SE.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgRoleObservation struct {
	// (String) The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The GUID of the object.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The identity provider for the UAA user.
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// (String) The org role type; see [Valid role types](https://v3-apidocs.cloudfoundry.org/version/3.154.0/index.html#valid-role-types).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The date and time when the resource was updated in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (String) The GUID of the Cloud Foundry user to assign the role to.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// (String) The username of the Cloud Foundry user to assign the role to.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OrgRoleParameters struct {
	OrgReference `json:",inline"`

	// (String) The org role type; see [Valid role types](https://v3-apidocs.cloudfoundry.org/version/3.154.0/index.html#valid-role-types).
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=User;Auditor;Manager;BillingManager;Users;Auditors;Managers;BillingManagers
	Type string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The identity provider for the UAA user.
	// +kubebuilder:validation:Optional
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// (String) The username of the Cloud Foundry user to assign the role to.
	// +kubebuilder:validation:Required
	Username string `json:"username,omitempty" tf:"username,omitempty"`
}

// OrgRoleSpec defines the desired state of OrgRole
type OrgRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgRoleParameters `json:"forProvider"`
}

// OrgRoleStatus defines the observed state of OrgRole.
type OrgRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrgRole is the Schema for the OrgRoles API. Provides a Cloud Foundry resource for assigning org roles.(Updating a role is not supported according to the docs)
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudfoundry}
type OrgRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrgRoleSpec   `json:"spec"`
	Status            OrgRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgRoleList contains a list of OrgRoles
type OrgRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgRole `json:"items"`
}

// Repository type metadata.
var (
	OrgRole_Kind             = "OrgRole"
	OrgRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgRole_Kind}.String()
	OrgRole_KindAPIVersion   = OrgRole_Kind + "." + CRDGroupVersion.String()
	OrgRole_GroupVersionKind = CRDGroupVersion.WithKind(OrgRole_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgRole{}, &OrgRoleList{})
}

// implement OrgScoped interface
func (s *OrgRole) GetOrgRef() *OrgReference {
	return &s.Spec.ForProvider.OrgReference
}
